data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
View(type_summary)
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
View(type_summary)
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
View(type_summary)
col_types_template <- map_chr(template_df, ~ class(.x)[1])
# Create standard file format
template_df <- read_csv("sportsref_download_LSU_2025.csv") %>% clean_names()
# Create standard file format
template_df <- read_csv(here("Data", "LSU"), "sportsref_download_LSU_2025.csv") %>% clean_names()
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract year from file name and add it
year <- str_extract(file, "\\d{4}")
df <- mutate(df, year = as.integer(year))
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
View(all_data)
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
View(all_data)
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
View(df)
# Load and install packages
pacman::p_load(tidyverse, baseballr, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets)
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>%
clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
# Function to read and clean data files
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
# Combine all data files
all_data <- map_dfr(data_list, ~ suppressWarnings(read_and_clean(.x, col_types_template)))
# Final Data
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
View(df)
# Identify user slider input ranges
min_ip <- floor(min(df$ip, na.rm = TRUE))
max_ip <- ceiling(max(df$ip, na.rm = TRUE))
# Identify seasons
seasons <- unique(df$year)
schools <- unique(df$school)
View(df)
data_list
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
data_list
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
View(df)
# Load and install packages
pacman::p_load(tidyverse, baseballr, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets)
# Set directory for data files
# data_path <- "/Users/matthewadams/Documents/R Projects/Baseball Data Analysis/Data/LSU"
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>%
clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
# Function to read and clean data files
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
# Combine all data files
all_data <- map_dfr(data_list, ~ suppressWarnings(read_and_clean(.x, col_types_template)))
# Final Data
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
# Identify user slider input ranges
min_ip <- floor(min(df$ip, na.rm = TRUE))
max_ip <- ceiling(max(df$ip, na.rm = TRUE))
# Identify seasons
seasons <- unique(df$year)
schools <- unique(df$school)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(template_df)
# Load and install packages
pacman::p_load(tidyverse, baseballr, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets)
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>%
clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
# Function to read and clean data files
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current file’s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
# Combine all data files
all_data <- map_dfr(data_list, ~ suppressWarnings(read_and_clean(.x, col_types_template)))
# Final Data
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
# Identify user slider input ranges
min_ip <- floor(min(df$ip, na.rm = TRUE))
max_ip <- ceiling(max(df$ip, na.rm = TRUE))
# Identify seasons
seasons <- unique(df$year)
schools <- unique(df$school)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(df)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(df)
View(all_data)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
# Final Data
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(-notes) %>%
relocate(season, .before = everything()) %>%
relocate(school, .after = season)
View(df)
# Final Data
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(-notes) %>%
relocate(year, .before = everything()) %>%
relocate(school, .after = year)
View(df)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(df)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
df %>%
mutate(team_year = paste(school, year))
df %>%
mutate(team_year = paste(school, year)) %>%
group_by(team_year) %>%
summarize(ERA = mean(era, na.rm = TRUE))
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3))
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3)) %>%
arrange(WHIP) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3)) %>%
arrange(WHIP)
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3))
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3))
df %>%
mutate(player_year = paste(name, year)) %>%
group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3)) %>%
arrange(WHIP)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(df)
df %>%
filter(ip > 0) %>%
mutate(player_year = paste(name, year)) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 0) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 2) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 5) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 10) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
test <- df %>%
filter(era < 1)
View(test)
test <- df %>%
filter(era == 0) %>%
distinct(ip)
View(test)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
