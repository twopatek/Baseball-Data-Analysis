group_by(player_year) %>%
summarize(WHIP = round(mean(whip, na.rm = TRUE), 3)) %>%
arrange(WHIP)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
View(df)
df %>%
filter(ip > 0) %>%
mutate(player_year = paste(name, year)) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 0) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 2) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 5) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
df %>%
filter(ip > 10) %>%
mutate(player_year = paste(name, year)) %>%
select(player_year, era) %>%
arrange(era) %>%
slice_head(n = 5) %>%
datatable(options = list(dom = 't'), rownames = FALSE)
test <- df %>%
filter(era < 1)
View(test)
test <- df %>%
filter(era == 0) %>%
distinct(ip)
View(test)
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
runApp('~/Documents/R Projects/Baseball Data Analysis/R')
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
install.packages("rsconnect", type = "binary")
rsconnect::deployApp()
library(rsconnect)
version
install.packages("rsconnect", type = "binary")
library(rsconnect)
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp(
appName = "ncaa_pitching_dashboard",
appTitle = "NCAA Pitching Dashboard",
account = "matthew-apps"
)
options(rsconnect.http.trace = TRUE)  # for debugging
options(rsconnect.http.trace.json = TRUE)
httr::set_config(httr::config(ssl_verifypeer = TRUE, ssl_verifyhost = 2))
rsconnect::deployApp(
appName = "ncaa_pitching_dashboard",
appTitle = "NCAA Pitching Dashboard",
account = "matthew-apps"
)
version
install.packages("rsconnect", type = "binary")
library(rsconnect)
deployApp()
options(pkgType = "binary")
install.packages("rsconnect", type = "binary")
deployApp()
install.packages("rsconnect", type = "binary")
library(rsconnect)
deployApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
which() R
which R
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets)
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# Create standard file format
template_df <- read_csv(here("Data", "LSU", "sportsref_download_LSU_2025.csv")) %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {  # Loop over every column name in the type template
if (col %in% names(df)) {      # Only run if that column exists in the current fileâ€™s dataframe
df[[col]] <- switch(         # Coerce the column to the desired type using the template
col_types[[col]],          # This fetches the desired type for this column, e.g. "character"
character = as.character(df[[col]]),  # If type is "character", convert it
numeric   = as.numeric(df[[col]]),    # If type is "numeric", convert it
integer   = as.integer(df[[col]]),    # If type is "integer", convert it
logical   = as.logical(df[[col]]),    # If type is "logical", convert it
df[[col]]  # default: if type doesn't match any above, leave it unchanged
)
}
}
# Extract school and year from filename
file_base <- basename(file)
school <- str_extract(file_base, "(?<=sportsref_download_)[A-Za-z]+")
year   <- str_extract(file_base, "\\d{4}")
df <- df %>%
mutate(
school = school,
year = as.integer(year)
)
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(year, school, name, era, ip, bb, bb9, so, so9, h, h9, hr, hr9, whip)
View(df)
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template)) %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk))
View(all_data)
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
df <- all_data %>%
mutate(name = str_replace_all(name, "[^A-Za-z ]", "")) %>%
filter(!is.na(rk)) %>%
select(-notes) %>%
relocate(year, .before = everything()) %>%
relocate(school, .after = year)
hr_weight <- 13
bb_weight <- 3
so_weight <- 2
fip_constant <- 3.1
test <- df %>%
mutate(
fip = if_else(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) | ip == 0,
NA_real_,
((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
)
)
View(test)
dist(test$fip)
summary(test$fip)
test %>%
filter(fip < 0 | fip > 10) %>%
select(name, school, year, ip, hr, bb, so, fip) %>%
arrange(fip)
test <- df %>%
filter(ip >= fip_min_ip) %>%
mutate(
fip = if_else(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) | ip == 0,
NA_real_,
((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
)
)
fip_min_ip <- 10
test <- df %>%
filter(ip >= fip_min_ip) %>%
mutate(
fip = if_else(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) | ip == 0,
NA_real_,
((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
)
)
test %>%
filter(fip < 0 | fip > 10) %>%
select(name, school, year, ip, hr, bb, so, fip) %>%
arrange(fip)
View(test)
test %>%
filter(fip < 0 | fip > 10) %>%
select(name, school, year, ip, hr, bb, so, fip) %>%
arrange(fip)
test <- df %>%
filter(ip >= fip_min_ip) %>%
mutate(
fip = if_else(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) | ip == 0,
NA_real_,
((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
)
)
View(test)
summary(test$fip)
test <- df %>%
mutate(
fip = if_else(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) | ip < fip_min_ip,
NA_real_,
((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
)
)
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf == 0 ~ NA_real_,
TRUE ~ so / bf
)
)
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
)
)
# Strikeout Rate Variables
k_pct_min_bf <- 10
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
)
)
# Walk rate variable
bb_pct_min_bf <- 10
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
)
)
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | bb < k_bb_min_bb ~ NA_real_,
TRUE ~ so / bb
)
)
# Strikeout-to-walk ratio variables
k_bb_min_bb <- 1
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | bb < k_bb_min_bb ~ NA_real_,
TRUE ~ so / bb
)
)
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | is.na(ip) ~ NA_real_,
ip < k_bb_min_ip ~ NA_real_,
bb == 0 ~ NA_real_,  # or Inf, depending on your preference
TRUE ~ so / bb
)
)
k_bb_min_ip <- 10
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | is.na(ip) ~ NA_real_,
ip < k_bb_min_ip ~ NA_real_,
bb == 0 ~ NA_real_,  # or Inf, depending on your preference
TRUE ~ so / bb
)
)
View(test)
# FIP formula variables
hr_weight <- 13
bb_weight <- 3
so_weight <- 2
fip_constant <- 3.1
fip_min_ip <- 10
# Strikeout rate variables
k_pct_min_bf <- 10
# Walk rate variables
bb_pct_min_bf <- 10
# Strikeout-to-walk ratio variables
k_bb_min_bb <- 1
k_bb_min_ip <- 10
# Testing data
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | is.na(ip) ~ NA_real_,
ip < k_bb_min_ip ~ NA_real_,
bb == 0 ~ NA_real_,  # or Inf, depending on your preference
TRUE ~ so / bb
),
babip_denominator = bf - so - bb - hbp - hr,
babip = case_when(
is.na(h) | is.na(hr) | is.na(so) | is.na(bb) | is.na(hbp) | is.na(bf) ~ NA_real_,
babip_denominator <= 0 ~ NA_real_,
TRUE ~ (h - hr) / babip_denominator
)
)
# BABIP variables
babip_min_ip <- 10
# FIP variables
hr_weight <- 13
bb_weight <- 3
so_weight <- 2
fip_constant <- 3.1
fip_min_ip <- 10
# SO % variables
k_pct_min_bf <- 10
# BB % variables
bb_pct_min_bf <- 10
# K/BB % variables
k_bb_min_bb <- 1
k_bb_min_ip <- 10
# BABIP variables
babip_min_ip <- 10
# Testing data
test <- df %>%
mutate(
fip = case_when(
is.na(hr) | is.na(bb) | is.na(so) | is.na(ip) ~ NA_real_,
ip < fip_min_ip ~ NA_real_,
TRUE ~ ((hr_weight * hr) + (bb_weight * bb) - (so_weight * so)) / ip + fip_constant
),
k_pct = case_when(
is.na(so) | is.na(bf) | bf < k_pct_min_bf ~ NA_real_,
TRUE ~ so / bf
),
bb_pct = case_when(
is.na(bb) | is.na(bf) | bf < bb_pct_min_bf ~ NA_real_,
TRUE ~ bb / bf
),
k_bb = case_when(
is.na(so) | is.na(bb) | is.na(ip) ~ NA_real_,
ip < k_bb_min_ip ~ NA_real_,
bb == 0 ~ NA_real_,  # or Inf, depending on your preference
TRUE ~ so / bb
),
babip_denominator = bf - so - bb - hbp - hr,
babip = case_when(
is.na(h) | is.na(hr) | is.na(so) | is.na(bb) | is.na(hbp) | is.na(bf) | is.na(ip) ~ NA_real_,
ip < babip_min_ip ~ NA_real_,
babip_denominator <= 0 ~ NA_real_,
TRUE ~ (h - hr) / babip_denominator
)
)
deployApp()
pacman::p_load(tidyverse, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets, rsconnect)
deployApp()
View(df)
shiny::runApp()
shiny::runApp()
deployApp()
deployApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, janitor, data.table, here, rlang, shinydashboard, shiny, DT, bslib, plotly, shinyWidgets)
# Path to all files
data_path <- here("Data")
# List data files to compile
data_list <- list.files(path = data_path, pattern = "sportsref_download", recursive = TRUE, full.names = TRUE)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
240/15
View(type_summary)
runApp()
runApp()
View(df)
runApp()
df %>%
# filter(ip >= input$ip_range[1], ip <= input$ip_range[2]) %>%
mutate(year_team = paste(year, school)) %>%
group_by(year_team) %>%
summarize(so = round(mean(so, na.rm = TRUE), 0))
View(df)
View(df)
View(all_data)
runApp()
deployApp()
