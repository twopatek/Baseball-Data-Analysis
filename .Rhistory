knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, baseballr, janitor, data.table)
# List data files to compile
data_files <- list.files(pattern = "sportsref_download")
type_summary <- map_dfr(data_files, function(file) {
df <- read_csv(file) %>% clean_names()
tibble(
file = file,
column = names(df),
type = map_chr(df, ~ class(.x)[1])
) %>%
pivot_wider(
names_from = file,
values_from = type
)
})
View(type_summary)
# List data files to compile
data_list <- list.files(pattern = "sportsref_download")
rm(data_files)
# Summary of structure of all files
type_summary <- map2_dfr(
data_list,
names(data_list),
~ {
df   <- .x
file <- .y
# get each column’s primary class
types <- map_chr(df, ~ class(.x)[1])
# build one row: file, n_vars, plus one column per var
tibble(
file   = file,
n_vars = length(types)
) %>%
bind_cols(as_tibble_row(types))
}
)
# Summary of structure of all files
type_summary <- map2_dfr(
data_list,
names(data_list),
~ {
df   <- .x
file <- .y
# get each column’s primary class
types <- map_chr(df, ~ class(.x)[1])
# build one row: file, n_vars, plus one column per var
tibble(
file   = file,
n_vars = length(types)
) %>%
bind_cols(as_tibble_row(types))
}
)
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Build summary of each file's column types
type_summary <- map_dfr(data_files, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# Build summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
View(type_summary)
# List data files to compile
data_list <- list.files(pattern = "sportsref_download")
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# View results
type_summary
# Count most common type per column across all files
column_type_summary <- type_summary %>%
select(-file, -n_vars) %>%
pivot_longer(everything(), names_to = "column", values_to = "type") %>%
group_by(column, type) %>%
summarise(n = n(), .groups = "drop") %>%
slice_max(n, by = column, with_ties = FALSE)
View(column_type_summary)
# Make a named vector: column name -> preferred type
preferred_types <- deframe(column_type_summary)
column_type_summary <- type_summary %>%
select(-file, -n_vars)
View(column_type_summary)
column_type_summary <- type_summary %>%
select(-file, -n_vars) %>%
pivot_longer(everything(), names_to = "column", values_to = "type")
# Create standard file format
template_df <- read_csv("sportsref_download_2025.csv") %>% clean_names()
# Create standard file format
template_df <- read_csv("sportsref_download_2025.csv") %>% clean_names()
setwd("~/Documents/GitHub/Baseball Data Analysis")
# Create standard file format
template_df <- read_csv("sportsref_download_2025.csv") %>% clean_names()
getwd()
# Create standard file format
template_df <- read_csv("sportsref_download_LSU_2025.csv") %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
View(template_df)
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {
if (col %in% names(df)) {
df[[col]] <- switch(
col_types[[col]],
character = as.character(df[[col]]),
numeric   = as.numeric(df[[col]]),
integer   = as.integer(df[[col]]),
logical   = as.logical(df[[col]]),
df[[col]]
)
}
}
df
}
all_data <- map_dfr(data_files, ~ read_and_clean(.x, col_types_template))
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
View(all_data)
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {
if (col %in% names(df)) {
df[[col]] <- switch(
col_types[[col]],
character = as.character(df[[col]]),
numeric   = as.numeric(df[[col]]),
integer   = as.integer(df[[col]]),
logical   = as.logical(df[[col]]),
df[[col]]
)
}
}
# Extract year from file name and add it
year <- str_extract(file, "\\d{4}")
df <- mutate(df, year = as.integer(year))
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
View(all_data)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, baseballr, janitor, data.table)
# List data files to compile
data_list <- list.files(pattern = "sportsref_download")
# Function to read and clean a file
process_file <- function(file) {
read_csv(file, show_col_types = FALSE) %>%
clean_names()
}
# Summary of each file's column types
type_summary <- map_dfr(data_list, function(file) {
df <- process_file(file)
types <- map_chr(df, ~ class(.x)[1])  # get class of each column
tibble(
file = file,
n_vars = ncol(df)
) %>%
bind_cols(as_tibble_row(types))
})
# Create standard file format
template_df <- read_csv("sportsref_download_LSU_2025.csv") %>% clean_names()
col_types_template <- map_chr(template_df, ~ class(.x)[1])
read_and_clean <- function(file, col_types) {
df <- read_csv(file, show_col_types = FALSE) %>% clean_names()
for (col in names(col_types)) {
if (col %in% names(df)) {
df[[col]] <- switch(
col_types[[col]],
character = as.character(df[[col]]),
numeric   = as.numeric(df[[col]]),
integer   = as.integer(df[[col]]),
logical   = as.logical(df[[col]]),
df[[col]]
)
}
}
# Extract year from file name and add it
year <- str_extract(file, "\\d{4}")
df <- mutate(df, year = as.integer(year))
return(df)
}
all_data <- map_dfr(data_list, ~ read_and_clean(.x, col_types_template))
View(all_data)
df <- all_data %>%
filter(is.na(rk)) %>%
relocate(year, .before = everything())
df <- all_data %>%
filter(!is.na(rk)) %>%
relocate(year, .before = everything())
View(df)
View(all_data)
